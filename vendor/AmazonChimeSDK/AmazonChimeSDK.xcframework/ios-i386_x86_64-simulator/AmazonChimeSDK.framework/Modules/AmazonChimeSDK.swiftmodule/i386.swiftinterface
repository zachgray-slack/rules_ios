// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AmazonChimeSDK
import AVFoundation
import AmazonChimeSDKMedia
import CoreGraphics.CGImage
import CoreGraphics
import CoreMedia
import CoreVideo
import Foundation
import ReplayKit
import Swift
import UIKit
import VideoToolbox
import os
@objc public protocol ActiveSpeakerDetectorFacade {
  @objc func addActiveSpeakerObserver(policy: AmazonChimeSDK.ActiveSpeakerPolicy, observer: AmazonChimeSDK.ActiveSpeakerObserver)
  @objc func removeActiveSpeakerObserver(observer: AmazonChimeSDK.ActiveSpeakerObserver)
  @objc func hasBandwidthPriorityCallback(hasBandwidthPriority: Swift.Bool)
}
@objc public protocol ActiveSpeakerObserver {
  @objc var observerId: Swift.String { get }
  @objc optional var scoresCallbackIntervalMs: Swift.Int { get }
  @objc optional func activeSpeakerScoreDidChange(scores: [AmazonChimeSDK.AttendeeInfo : Swift.Double])
  @objc func activeSpeakerDidDetect(attendeeInfo: [AmazonChimeSDK.AttendeeInfo])
}
@objc public protocol VideoCaptureSource : AmazonChimeSDK.VideoSource {
  @objc func start()
  @objc func stop()
  @objc func addCaptureSourceObserver(observer: AmazonChimeSDK.CaptureSourceObserver)
  @objc func removeCaptureSourceObserver(observer: AmazonChimeSDK.CaptureSourceObserver)
}
@objc public protocol ActiveSpeakerPolicy {
  @objc func calculateScore(attendeeInfo: AmazonChimeSDK.AttendeeInfo, volume: AmazonChimeSDK.VolumeLevel) -> Swift.Double
  @objc func prioritizeVideoSendBandwidthForActiveSpeaker() -> Swift.Bool
}
@objc public protocol AudioClientController {
  @objc func setMute(mute: Swift.Bool) -> Swift.Bool
  @objc func start(audioFallbackUrl: Swift.String, audioHostUrl: Swift.String, meetingId: Swift.String, attendeeId: Swift.String, joinToken: Swift.String, callKitEnabled: Swift.Bool) throws
  @objc func stop()
  @objc func setVoiceFocusEnabled(enabled: Swift.Bool) -> Swift.Bool
  @objc func isVoiceFocusEnabled() -> Swift.Bool
}
@objc public protocol AudioClientObserver {
  @objc func notifyAudioClientObserver(observerFunction: @escaping (AmazonChimeSDK.AudioVideoObserver) -> Swift.Void)
  @objc func subscribeToAudioClientStateChange(observer: AmazonChimeSDK.AudioVideoObserver)
  @objc func subscribeToRealTimeEvents(observer: AmazonChimeSDK.RealtimeObserver)
  @objc func unsubscribeFromAudioClientStateChange(observer: AmazonChimeSDK.AudioVideoObserver)
  @objc func unsubscribeFromRealTimeEvents(observer: AmazonChimeSDK.RealtimeObserver)
}
@objc public enum MeetingHistoryEventName : Swift.Int, Swift.CaseIterable, Swift.CustomStringConvertible {
  case audioInputSelected
  case videoInputSelected
  case videoInputFailed
  case meetingStartFailed
  case meetingStartRequested
  case meetingStartSucceeded
  case meetingEnded
  case meetingFailed
  case meetingReconnected
  case unknown
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [AmazonChimeSDK.MeetingHistoryEventName]
  public static var allCases: [AmazonChimeSDK.MeetingHistoryEventName] {
    get
  }
}
@objc public protocol DataMessageObserver {
  @objc func dataMessageDidReceived(dataMessage: AmazonChimeSDK.DataMessage)
}
@objc public protocol AudioVideoControllerFacade {
  @objc var configuration: AmazonChimeSDK.MeetingSessionConfiguration { get }
  @objc var logger: AmazonChimeSDK.Logger { get }
  @objc func start(callKitEnabled: Swift.Bool) throws
  @objc func start() throws
  @objc func stop()
  @objc func startLocalVideo() throws
  @objc func startLocalVideo(source: AmazonChimeSDK.VideoSource)
  @objc func stopLocalVideo()
  @objc func startRemoteVideo()
  @objc func stopRemoteVideo()
  @objc func addAudioVideoObserver(observer: AmazonChimeSDK.AudioVideoObserver)
  @objc func removeAudioVideoObserver(observer: AmazonChimeSDK.AudioVideoObserver)
  @objc func addMetricsObserver(observer: AmazonChimeSDK.MetricsObserver)
  @objc func removeMetricsObserver(observer: AmazonChimeSDK.MetricsObserver)
}
@objc public protocol AudioVideoFacade : AmazonChimeSDK.ActiveSpeakerDetectorFacade, AmazonChimeSDK.AudioVideoControllerFacade, AmazonChimeSDK.ContentShareController, AmazonChimeSDK.DeviceController, AmazonChimeSDK.EventAnalyticsFacade, AmazonChimeSDK.RealtimeControllerFacade, AmazonChimeSDK.VideoTileControllerFacade {
}
@objc public protocol AudioVideoObserver {
  @objc func audioSessionDidStartConnecting(reconnecting: Swift.Bool)
  @objc func audioSessionDidStart(reconnecting: Swift.Bool)
  @objc func audioSessionDidDrop()
  @objc func audioSessionDidStopWithStatus(sessionStatus: AmazonChimeSDK.MeetingSessionStatus)
  @objc func audioSessionDidCancelReconnect()
  @objc func connectionDidRecover()
  @objc func connectionDidBecomePoor()
  @objc func videoSessionDidStartConnecting()
  @objc func videoSessionDidStartWithStatus(sessionStatus: AmazonChimeSDK.MeetingSessionStatus)
  @objc func videoSessionDidStopWithStatus(sessionStatus: AmazonChimeSDK.MeetingSessionStatus)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DeviceUtils : ObjectiveC.NSObject {
  @objc public static func getModelInfo() -> Swift.String
  @objc public static func getDetailedInfo() -> AmazonChimeSDKMedia.app_detailed_info_t
  @objc public static func getAppInfo() -> AmazonChimeSDKMedia.AppInfo
  @objc deinit
  @objc override dynamic public init()
}
@objc @objcMembers public class AttendeeInfo : ObjectiveC.NSObject, Swift.Comparable {
  @objc final public let attendeeId: Swift.String
  @objc final public let externalUserId: Swift.String
  @objc public init(attendeeId: Swift.String, externalUserId: Swift.String)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  public static func < (lhs: AmazonChimeSDK.AttendeeInfo, rhs: AmazonChimeSDK.AttendeeInfo) -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol ClientMetricsCollector {
  @objc func processAudioClientMetrics(metrics: [Swift.AnyHashable : Any])
  @objc func processVideoClientMetrics(metrics: [Swift.AnyHashable : Any])
  @objc func processContentShareVideoClientMetrics(metrics: [Swift.AnyHashable : Any])
  @objc func subscribeToMetrics(observer: AmazonChimeSDK.MetricsObserver)
  @objc func unsubscribeFromMetrics(observer: AmazonChimeSDK.MetricsObserver)
}
@objc @objcMembers public class ConsoleLogger : ObjectiveC.NSObject, AmazonChimeSDK.Logger {
  @objc public init(name: Swift.String, level: AmazonChimeSDK.LogLevel = .INFO)
  @objc public func `default`(msg: Swift.String)
  @objc public func debug(debugFunction: () -> Swift.String)
  @objc public func info(msg: Swift.String)
  @objc public func fault(msg: Swift.String)
  @objc public func error(msg: Swift.String)
  @objc public func setLogLevel(level: AmazonChimeSDK.LogLevel)
  @objc public func getLogLevel() -> AmazonChimeSDK.LogLevel
  @objc deinit
  @objc override dynamic public init()
}
@objc public enum ModalityType : Swift.Int, Swift.Error, Swift.CustomStringConvertible {
  case content
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
@objc @objcMembers public class CreateAttendeeResponse : ObjectiveC.NSObject {
  @objc public init(attendee: AmazonChimeSDK.Attendee)
  @objc deinit
  @objc override dynamic public init()
}
@objc @objcMembers public class Attendee : ObjectiveC.NSObject {
  @objc public init(attendeeId: Swift.String, externalUserId: Swift.String, joinToken: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
public typealias URLRewriter = (Swift.String) -> Swift.String
@objc @_inheritsConvenienceInitializers @objcMembers public class URLRewriterUtils : ObjectiveC.NSObject {
  @objc public static let defaultUrlRewriter: (Swift.String) -> Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@objc @objcMembers public class CreateMeetingResponse : ObjectiveC.NSObject {
  @objc public init(meeting: AmazonChimeSDK.Meeting)
  @objc deinit
  @objc override dynamic public init()
}
@objc @objcMembers public class Meeting : ObjectiveC.NSObject {
  @objc public init(externalMeetingId: Swift.String?, mediaPlacement: AmazonChimeSDK.MediaPlacement, mediaRegion: Swift.String, meetingId: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@objc @objcMembers public class MediaPlacement : ObjectiveC.NSObject {
  @objc public init(audioFallbackUrl: Swift.String, audioHostUrl: Swift.String, signalingUrl: Swift.String, turnControlUrl: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@objc @objcMembers public class DefaultActiveSpeakerDetector : ObjectiveC.NSObject, AmazonChimeSDK.ActiveSpeakerDetectorFacade, AmazonChimeSDK.RealtimeObserver {
  @objc public init(selfAttendeeId: Swift.String)
  @objc public func hasBandwidthPriorityCallback(hasBandwidthPriority: Swift.Bool)
  @objc public func volumeDidChange(volumeUpdates: [AmazonChimeSDK.VolumeUpdate])
  @objc public func signalStrengthDidChange(signalUpdates: [AmazonChimeSDK.SignalUpdate])
  @objc public func attendeesDidLeave(attendeeInfo: [AmazonChimeSDK.AttendeeInfo])
  @objc public func attendeesDidDrop(attendeeInfo: [AmazonChimeSDK.AttendeeInfo])
  @objc public func attendeesDidMute(attendeeInfo: [AmazonChimeSDK.AttendeeInfo])
  @objc public func attendeesDidUnmute(attendeeInfo: [AmazonChimeSDK.AttendeeInfo])
  @objc public func attendeesDidJoin(attendeeInfo attendeeInfos: [AmazonChimeSDK.AttendeeInfo])
  @objc public func addActiveSpeakerObserver(policy: AmazonChimeSDK.ActiveSpeakerPolicy, observer: AmazonChimeSDK.ActiveSpeakerObserver)
  @objc public func removeActiveSpeakerObserver(observer: AmazonChimeSDK.ActiveSpeakerObserver)
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol AudioClientProtocol {
  @objc func startSession(_ host: Swift.String!, basePort port: Swift.Int, callId: Swift.String!, profileId: Swift.String!, microphoneMute mic_mute: Swift.Bool, speakerMute spk_mute: Swift.Bool, isPresenter presenter: Swift.Bool, sessionToken tokenString: Swift.String!, audioWsUrl: Swift.String!, callKitEnabled: Swift.Bool, appInfo: AmazonChimeSDKMedia.AppInfo!) -> AmazonChimeSDKMedia.audio_client_status_t
  @objc func startSession(_ host: Swift.String!, basePort port: Swift.Int, callId: Swift.String!, profileId: Swift.String!, microphoneMute mic_mute: Swift.Bool, speakerMute spk_mute: Swift.Bool, isPresenter presenter: Swift.Bool, sessionToken tokenString: Swift.String!, audioWsUrl: Swift.String!, callKitEnabled: Swift.Bool) -> AmazonChimeSDKMedia.audio_client_status_t
  @objc func stopSession() -> Swift.Int
  @objc func isSpeakerOn() -> Swift.Bool
  @objc func setSpeakerOn(_ value: Swift.Bool) -> Swift.Bool
  @objc func stopAudioRecord() -> Swift.Int
  @objc func isMicrophoneMuted() -> Swift.Bool
  @objc func setMicrophoneMuted(_ mute: Swift.Bool) -> Swift.Int
  @objc func setPresenter(_ presenter: Swift.Bool)
  @objc func remoteMute()
  @objc func audioLogCallBack(_ logLevel: AmazonChimeSDKMedia.loglevel_t, msg: Swift.String!)
  @objc func isBliteNSSelected() -> Swift.Bool
  @objc func setBliteNSSelected(_ bliteSelected: Swift.Bool) -> Swift.Int
  @objc var delegate: AmazonChimeSDKMedia.AudioClientDelegate! { get set }
}
extension AudioClient : AmazonChimeSDK.AudioClientProtocol {
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DefaultActiveSpeakerPolicy : ObjectiveC.NSObject, AmazonChimeSDK.ActiveSpeakerPolicy {
  @objc public static let defaultSpeakerWeight: Swift.Double
  @objc public static let defaultCutoffThreshold: Swift.Double
  @objc public static let defaultTakeoverRate: Swift.Double
  @objc convenience override dynamic public init()
  @objc public init(speakerWeight: Swift.Double = DefaultActiveSpeakerPolicy.defaultSpeakerWeight, cutoffThreshold: Swift.Double = DefaultActiveSpeakerPolicy.defaultCutoffThreshold, takeoverRate: Swift.Double = DefaultActiveSpeakerPolicy.defaultTakeoverRate)
  @objc public func calculateScore(attendeeInfo: AmazonChimeSDK.AttendeeInfo, volume: AmazonChimeSDK.VolumeLevel) -> Swift.Double
  @objc public func prioritizeVideoSendBandwidthForActiveSpeaker() -> Swift.Bool
  @objc deinit
}
@objc public enum EventAttributeName : Swift.Int, Swift.CustomStringConvertible, Swift.CaseIterable {
  case deviceName
  case deviceManufacturer
  case deviceModel
  case osName
  case osVersion
  case sdkName
  case sdkVersion
  case mediaSdkVersion
  case timestampMs
  case attendeeId
  case externalMeetingId
  case externalUserId
  case meetingId
  case meetingHistory
  case maxVideoTileCount
  case meetingDurationMs
  case meetingErrorMessage
  case meetingStatus
  case poorConnectionCount
  case retryCount
  case videoInputError
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [AmazonChimeSDK.EventAttributeName]
  public static var allCases: [AmazonChimeSDK.EventAttributeName] {
    get
  }
}
@objc @objcMembers public class VideoFramePixelBuffer : ObjectiveC.NSObject, AmazonChimeSDK.VideoFrameBuffer {
  @objc public func width() -> Swift.Int
  @objc public func height() -> Swift.Int
  @objc final public let pixelBuffer: CoreVideo.CVPixelBuffer
  @objc public init(pixelBuffer: CoreVideo.CVPixelBuffer)
  @objc deinit
  @objc override dynamic public init()
}
@objc @objcMembers public class VideoCaptureFormat : ObjectiveC.NSObject {
  @objc final public let width: Swift.Int
  @objc final public let height: Swift.Int
  @objc final public let maxFrameRate: Swift.Int
  @objc public init(width: Swift.Int, height: Swift.Int, maxFrameRate: Swift.Int)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc public static func fromAVCaptureDeviceFormat(format: AVFoundation.AVCaptureDevice.Format) -> AmazonChimeSDK.VideoCaptureFormat
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol CaptureSourceObserver {
  @objc func captureDidStart()
  @objc func captureDidStop()
  @objc func captureDidFail(error: AmazonChimeSDK.CaptureSourceError)
}
@objc public enum CaptureSourceError : Swift.Int {
  case unknown = 0
  case systemFailure = 1
  case configurationFailure = 2
  case invalidFrame = 3
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers public class ReplayKitSource : AmazonChimeSDK.VideoSource {
  @objc public var videoContentHint: AmazonChimeSDK.VideoContentHint
  @objc public init(logger: AmazonChimeSDK.Logger)
  @objc public func stop()
  @objc public func addVideoSink(sink: AmazonChimeSDK.VideoSink)
  @objc public func removeVideoSink(sink: AmazonChimeSDK.VideoSink)
  @objc public func processSampleBuffer(sampleBuffer: CoreMedia.CMSampleBuffer, type: ReplayKit.RPSampleBufferType)
  @objc deinit
}
@objc @objcMembers public class DefaultAudioVideoController : ObjectiveC.NSObject, AmazonChimeSDK.AudioVideoControllerFacade {
  @objc final public let configuration: AmazonChimeSDK.MeetingSessionConfiguration
  @objc final public let logger: AmazonChimeSDK.Logger
  @objc public init(audioClientController: AmazonChimeSDK.AudioClientController, audioClientObserver: AmazonChimeSDK.AudioClientObserver, clientMetricsCollector: AmazonChimeSDK.ClientMetricsCollector, videoClientController: AmazonChimeSDK.VideoClientController, videoTileController: AmazonChimeSDK.VideoTileController, configuration: AmazonChimeSDK.MeetingSessionConfiguration, logger: AmazonChimeSDK.Logger)
  @objc public func start() throws
  @objc public func start(callKitEnabled: Swift.Bool) throws
  @objc public func stop()
  @objc public func addAudioVideoObserver(observer: AmazonChimeSDK.AudioVideoObserver)
  @objc public func removeAudioVideoObserver(observer: AmazonChimeSDK.AudioVideoObserver)
  @objc public func addMetricsObserver(observer: AmazonChimeSDK.MetricsObserver)
  @objc public func removeMetricsObserver(observer: AmazonChimeSDK.MetricsObserver)
  @objc public func startLocalVideo() throws
  @objc public func startLocalVideo(source: AmazonChimeSDK.VideoSource)
  @objc public func stopLocalVideo()
  @objc public func startRemoteVideo()
  @objc public func stopRemoteVideo()
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol ContentShareObserver {
  @objc func contentShareDidStart()
  @objc func contentShareDidStop(status: AmazonChimeSDK.ContentShareStatus)
}
@objc @objcMembers public class DefaultAudioVideoFacade : ObjectiveC.NSObject, AmazonChimeSDK.AudioVideoFacade {
  @objc final public let configuration: AmazonChimeSDK.MeetingSessionConfiguration
  @objc final public let logger: AmazonChimeSDK.Logger
  @objc public init(audioVideoController: AmazonChimeSDK.AudioVideoControllerFacade, realtimeController: AmazonChimeSDK.RealtimeControllerFacade, deviceController: AmazonChimeSDK.DeviceController, videoTileController: AmazonChimeSDK.VideoTileController, activeSpeakerDetector: AmazonChimeSDK.ActiveSpeakerDetectorFacade, contentShareController: AmazonChimeSDK.ContentShareController, eventAnalyticsController: AmazonChimeSDK.EventAnalyticsController, meetingStatsCollector: AmazonChimeSDK.MeetingStatsCollector)
  @objc public func start(callKitEnabled: Swift.Bool = false) throws
  @objc public func start() throws
  @objc public func stop()
  @objc public func startLocalVideo() throws
  @objc public func startLocalVideo(source: AmazonChimeSDK.VideoSource)
  @objc public func stopLocalVideo()
  @objc public func startRemoteVideo()
  @objc public func stopRemoteVideo()
  @objc public func realtimeLocalMute() -> Swift.Bool
  @objc public func realtimeLocalUnmute() -> Swift.Bool
  @objc public func addRealtimeObserver(observer: AmazonChimeSDK.RealtimeObserver)
  @objc public func removeRealtimeObserver(observer: AmazonChimeSDK.RealtimeObserver)
  @objc public func addRealtimeDataMessageObserver(topic: Swift.String, observer: AmazonChimeSDK.DataMessageObserver)
  @objc public func removeRealtimeDataMessageObserverFromTopic(topic: Swift.String)
  @objc public func realtimeSendDataMessage(topic: Swift.String, data: Any, lifetimeMs: Swift.Int32 = 0) throws
  @objc public func realtimeSetVoiceFocusEnabled(enabled: Swift.Bool) -> Swift.Bool
  @objc public func realtimeIsVoiceFocusEnabled() -> Swift.Bool
  @objc public func addAudioVideoObserver(observer: AmazonChimeSDK.AudioVideoObserver)
  @objc public func removeAudioVideoObserver(observer: AmazonChimeSDK.AudioVideoObserver)
  @objc public func addMetricsObserver(observer: AmazonChimeSDK.MetricsObserver)
  @objc public func removeMetricsObserver(observer: AmazonChimeSDK.MetricsObserver)
  @objc public func listAudioDevices() -> [AmazonChimeSDK.MediaDevice]
  @objc public func chooseAudioDevice(mediaDevice: AmazonChimeSDK.MediaDevice)
  @objc public func addDeviceChangeObserver(observer: AmazonChimeSDK.DeviceChangeObserver)
  @objc public func removeDeviceChangeObserver(observer: AmazonChimeSDK.DeviceChangeObserver)
  @objc public func switchCamera()
  @objc public func getActiveCamera() -> AmazonChimeSDK.MediaDevice?
  @objc public func bindVideoView(videoView: AmazonChimeSDK.VideoRenderView, tileId: Swift.Int)
  @objc public func unbindVideoView(tileId: Swift.Int)
  @objc public func addVideoTileObserver(observer: AmazonChimeSDK.VideoTileObserver)
  @objc public func removeVideoTileObserver(observer: AmazonChimeSDK.VideoTileObserver)
  @objc public func pauseRemoteVideoTile(tileId: Swift.Int)
  @objc public func resumeRemoteVideoTile(tileId: Swift.Int)
  @objc public func addActiveSpeakerObserver(policy: AmazonChimeSDK.ActiveSpeakerPolicy, observer: AmazonChimeSDK.ActiveSpeakerObserver)
  @objc public func removeActiveSpeakerObserver(observer: AmazonChimeSDK.ActiveSpeakerObserver)
  @objc public func hasBandwidthPriorityCallback(hasBandwidthPriority: Swift.Bool)
  @objc public func getActiveAudioDevice() -> AmazonChimeSDK.MediaDevice?
  @objc public func startContentShare(source: AmazonChimeSDK.ContentShareSource)
  @objc public func stopContentShare()
  @objc public func addContentShareObserver(observer: AmazonChimeSDK.ContentShareObserver)
  @objc public func removeContentShareObserver(observer: AmazonChimeSDK.ContentShareObserver)
  @objc public func addEventAnalyticsObserver(observer: AmazonChimeSDK.EventAnalyticsObserver)
  @objc public func removeEventAnalyticsObserver(observer: AmazonChimeSDK.EventAnalyticsObserver)
  @objc public func getMeetingHistory() -> [AmazonChimeSDK.MeetingHistoryEvent]
  @objc public func getCommonEventAttributes() -> [Swift.AnyHashable : Any]
  @objc deinit
  @objc override dynamic public init()
}
extension CMSampleBuffer {
  public func getVideoRotation() -> AmazonChimeSDK.VideoRotation
}
@objc @objcMembers public class DefaultContentShareVideoClientController : ObjectiveC.NSObject, AmazonChimeSDK.ContentShareVideoClientController {
  @objc public init(videoClient: AmazonChimeSDK.VideoClientProtocol, configuration: AmazonChimeSDK.MeetingSessionConfiguration, logger: AmazonChimeSDK.Logger, clientMetricsCollector: AmazonChimeSDK.ClientMetricsCollector)
  @objc public func startVideoShare(source: AmazonChimeSDK.VideoSource)
  @objc public func stopVideoShare()
  @objc public func subscribeToVideoClientStateChange(observer: AmazonChimeSDK.ContentShareObserver)
  @objc public func unsubscribeFromVideoClientStateChange(observer: AmazonChimeSDK.ContentShareObserver)
  @objc deinit
  @objc override dynamic public init()
}
extension DefaultContentShareVideoClientController : AmazonChimeSDKMedia.VideoClientDelegate {
  @objc dynamic public func videoClientRequestTurnCreds(_ client: AmazonChimeSDKMedia.VideoClient?)
  @objc dynamic public func videoClientIsConnecting(_ client: AmazonChimeSDKMedia.VideoClient?)
  @objc dynamic public func videoClientDidConnect(_ client: AmazonChimeSDKMedia.VideoClient?, controlStatus: Swift.Int32)
  @objc dynamic public func videoClientDidFail(_ client: AmazonChimeSDKMedia.VideoClient?, status: AmazonChimeSDKMedia.video_client_status_t, controlStatus: Swift.Int32)
  @objc dynamic public func videoClientDidStop(_ client: AmazonChimeSDKMedia.VideoClient?)
  @objc dynamic public func videoClientMetricsReceived(_ metrics: [Swift.AnyHashable : Any]?)
}
@objc public protocol CameraCaptureSource : AmazonChimeSDK.VideoCaptureSource {
  @objc var device: AmazonChimeSDK.MediaDevice? { get set }
  @objc var torchEnabled: Swift.Bool { get set }
  @objc var format: AmazonChimeSDK.VideoCaptureFormat { get set }
  @objc func switchCamera()
}
@objc @objcMembers public class DefaultDeviceController : ObjectiveC.NSObject, AmazonChimeSDK.DeviceController {
  @objc public init(audioSession: AmazonChimeSDK.AudioSession, videoClientController: AmazonChimeSDK.VideoClientController, eventAnalyticsController: AmazonChimeSDK.EventAnalyticsController, logger: AmazonChimeSDK.Logger)
  @objc deinit
  @objc public func listAudioDevices() -> [AmazonChimeSDK.MediaDevice]
  @objc public func chooseAudioDevice(mediaDevice: AmazonChimeSDK.MediaDevice)
  @objc public func addDeviceChangeObserver(observer: AmazonChimeSDK.DeviceChangeObserver)
  @objc public func removeDeviceChangeObserver(observer: AmazonChimeSDK.DeviceChangeObserver)
  @objc public func switchCamera()
  @objc public func getActiveCamera() -> AmazonChimeSDK.MediaDevice?
  @objc public func getActiveAudioDevice() -> AmazonChimeSDK.MediaDevice?
  @objc override dynamic public init()
}
@objc @objcMembers public class DefaultModality : ObjectiveC.NSObject {
  @objc final public let id: Swift.String
  @objc final public let base: Swift.String
  @objc final public let modality: Swift.String?
  public static let separator: Swift.Character
  @objc public init(id: Swift.String)
  @objc public func isOfType(type: AmazonChimeSDK.ModalityType) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class DefaultMeetingSession : ObjectiveC.NSObject, AmazonChimeSDK.MeetingSession {
  @objc final public let audioVideo: AmazonChimeSDK.AudioVideoFacade
  @objc final public let configuration: AmazonChimeSDK.MeetingSessionConfiguration
  @objc final public let logger: AmazonChimeSDK.Logger
  @objc final public let eventAnalyticsController: AmazonChimeSDK.EventAnalyticsController
  @objc public init(configuration: AmazonChimeSDK.MeetingSessionConfiguration, logger: AmazonChimeSDK.Logger)
  @objc deinit
  @objc override dynamic public init()
}
@objc @objcMembers public class DefaultRealtimeController : ObjectiveC.NSObject, AmazonChimeSDK.RealtimeControllerFacade {
  @objc public init(audioClientController: AmazonChimeSDK.AudioClientController, audioClientObserver: AmazonChimeSDK.AudioClientObserver, videoClientController: AmazonChimeSDK.VideoClientController)
  @objc public func realtimeLocalMute() -> Swift.Bool
  @objc public func realtimeLocalUnmute() -> Swift.Bool
  @objc public func addRealtimeObserver(observer: AmazonChimeSDK.RealtimeObserver)
  @objc public func removeRealtimeObserver(observer: AmazonChimeSDK.RealtimeObserver)
  @objc public func addRealtimeDataMessageObserver(topic: Swift.String, observer: AmazonChimeSDK.DataMessageObserver)
  @objc public func removeRealtimeDataMessageObserverFromTopic(topic: Swift.String)
  @objc public func realtimeSendDataMessage(topic: Swift.String, data: Any, lifetimeMs: Swift.Int32 = 0) throws
  @objc public func realtimeSetVoiceFocusEnabled(enabled: Swift.Bool) -> Swift.Bool
  @objc public func realtimeIsVoiceFocusEnabled() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TURNRequestService : ObjectiveC.NSObject {
  @objc deinit
  @objc override dynamic public init()
}
@objc public enum VideoRotation : Swift.Int {
  case rotation0 = 0
  case rotation90 = 90
  case rotation180 = 180
  case rotation270 = 270
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum AttendeeStatus : Swift.Int, Swift.CaseIterable, Swift.CustomStringConvertible {
  case joined = 1
  case left = 2
  case dropped = 3
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [AmazonChimeSDK.AttendeeStatus]
  public static var allCases: [AmazonChimeSDK.AttendeeStatus] {
    get
  }
}
@objc @objcMembers public class DefaultVideoRenderView : UIKit.UIImageView, AmazonChimeSDK.VideoRenderView {
  @objc public var mirror: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc public func onVideoFrameReceived(frame: AmazonChimeSDK.VideoFrame)
  @objc public func resetImage()
  @objc deinit
  @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
}
@objc public protocol VideoFrameBuffer {
  @objc func width() -> Swift.Int
  @objc func height() -> Swift.Int
}
@objc public enum EventName : Swift.Int, Swift.CaseIterable, Swift.CustomStringConvertible {
  case videoInputFailed
  case meetingStartRequested
  case meetingStartSucceeded
  case meetingStartFailed
  case meetingFailed
  case meetingEnded
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [AmazonChimeSDK.EventName]
  public static var allCases: [AmazonChimeSDK.EventName] {
    get
  }
}
@objc @objcMembers public class DefaultVideoTile : ObjectiveC.NSObject, AmazonChimeSDK.VideoTile {
  @objc public var state: AmazonChimeSDK.VideoTileState
  @objc public var videoRenderView: AmazonChimeSDK.VideoRenderView?
  @objc public init(tileId: Swift.Int, attendeeId: Swift.String, videoStreamContentWidth: Swift.Int, videoStreamContentHeight: Swift.Int, isLocalTile: Swift.Bool, logger: AmazonChimeSDK.Logger)
  @objc public func bind(videoRenderView: AmazonChimeSDK.VideoRenderView?)
  @objc public func onVideoFrameReceived(frame: AmazonChimeSDK.VideoFrame)
  @objc public func unbind()
  @objc public func setPauseState(pauseState: AmazonChimeSDK.VideoPauseState)
  @objc deinit
  @objc override dynamic public init()
}
@objc @objcMembers public class DefaultVideoTileController : ObjectiveC.NSObject, AmazonChimeSDK.VideoTileController {
  @objc public init(videoClientController: AmazonChimeSDK.VideoClientController, logger: AmazonChimeSDK.Logger, meetingStatsCollector: AmazonChimeSDK.MeetingStatsCollector)
  @objc public func onReceiveFrame(frame: AmazonChimeSDK.VideoFrame?, videoId: Swift.Int, attendeeId: Swift.String?, pauseState: AmazonChimeSDK.VideoPauseState)
  @objc public func bindVideoView(videoView: AmazonChimeSDK.VideoRenderView, tileId: Swift.Int)
  @objc public func unbindVideoView(tileId: Swift.Int)
  @objc public func addVideoTileObserver(observer: AmazonChimeSDK.VideoTileObserver)
  @objc public func removeVideoTileObserver(observer: AmazonChimeSDK.VideoTileObserver)
  @objc public func pauseRemoteVideoTile(tileId: Swift.Int)
  @objc public func resumeRemoteVideoTile(tileId: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol DeviceChangeObserver {
  @objc func audioDeviceDidChange(freshAudioDeviceList: [AmazonChimeSDK.MediaDevice])
}
@objc public protocol DeviceController {
  @objc func listAudioDevices() -> [AmazonChimeSDK.MediaDevice]
  @objc func chooseAudioDevice(mediaDevice: AmazonChimeSDK.MediaDevice)
  @objc func addDeviceChangeObserver(observer: AmazonChimeSDK.DeviceChangeObserver)
  @objc func removeDeviceChangeObserver(observer: AmazonChimeSDK.DeviceChangeObserver)
  @objc func switchCamera()
  @objc func getActiveCamera() -> AmazonChimeSDK.MediaDevice?
  @objc func getActiveAudioDevice() -> AmazonChimeSDK.MediaDevice?
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ContentShareSource : ObjectiveC.NSObject {
  @objc public var videoSource: AmazonChimeSDK.VideoSource?
  @objc deinit
  @objc override dynamic public init()
}
@objc @available(iOS 11.0, *)
@objcMembers public class InAppScreenCaptureSource : ObjectiveC.NSObject, AmazonChimeSDK.VideoCaptureSource {
  @objc public var videoContentHint: AmazonChimeSDK.VideoContentHint
  @objc public init(logger: AmazonChimeSDK.Logger)
  @objc public func start()
  @objc public func stop()
  @objc public func addVideoSink(sink: AmazonChimeSDK.VideoSink)
  @objc public func removeVideoSink(sink: AmazonChimeSDK.VideoSink)
  @objc public func addCaptureSourceObserver(observer: AmazonChimeSDK.CaptureSourceObserver)
  @objc public func removeCaptureSourceObserver(observer: AmazonChimeSDK.CaptureSourceObserver)
  @objc deinit
  @objc override dynamic public init()
}
extension Dictionary where Key == Swift.AnyHashable {
  public func toJsonString() -> Swift.String
}
@objc extension NSDictionary {
  @objc dynamic public func toJsonString() -> Swift.String
}
@objc public protocol ContentShareVideoClientController {
  @objc func startVideoShare(source: AmazonChimeSDK.VideoSource)
  @objc func stopVideoShare()
  @objc func subscribeToVideoClientStateChange(observer: AmazonChimeSDK.ContentShareObserver)
  @objc func unsubscribeFromVideoClientStateChange(observer: AmazonChimeSDK.ContentShareObserver)
}
@objc @objcMembers public class IntervalScheduler : ObjectiveC.NSObject, AmazonChimeSDK.Scheduler {
  @objc public init(intervalMs: Swift.Int, callback: @escaping () -> Swift.Void)
  @objc deinit
  @objc public func start()
  @objc public func stop()
  @objc override dynamic public init()
}
@objc public protocol Logger {
  @objc func `default`(msg: Swift.String)
  @objc func debug(debugFunction: () -> Swift.String)
  @objc func info(msg: Swift.String)
  @objc func fault(msg: Swift.String)
  @objc func error(msg: Swift.String)
  @objc func setLogLevel(level: AmazonChimeSDK.LogLevel)
  @objc func getLogLevel() -> AmazonChimeSDK.LogLevel
}
@objc public enum LogLevel : Swift.Int, Swift.CaseIterable, Swift.CustomStringConvertible {
  case DEFAULT = 0
  case DEBUG = 1
  case INFO = 2
  case FAULT = 3
  case ERROR = 4
  case OFF = 5
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [AmazonChimeSDK.LogLevel]
  public static var allCases: [AmazonChimeSDK.LogLevel] {
    get
  }
  public init?(rawValue: Swift.Int)
}
@objc @objcMembers public class MediaDevice : ObjectiveC.NSObject {
  @objc final public let label: Swift.String
  @objc final public let type: AmazonChimeSDK.MediaDeviceType
  @objc final public let port: AVFoundation.AVAudioSessionPortDescription?
  @objc public static func listVideoDevices() -> [AmazonChimeSDK.MediaDevice]
  @objc public static func listSupportedVideoCaptureFormats(mediaDevice: AmazonChimeSDK.MediaDevice) -> [AmazonChimeSDK.VideoCaptureFormat]
  @objc public init(label: Swift.String, type: AmazonChimeSDK.MediaDeviceType)
  @objc public init(label: Swift.String, port: AVFoundation.AVAudioSessionPortDescription? = nil, videoDevice: AmazonChimeSDKMedia.VideoDevice? = nil)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol EventAnalyticsController {
  @objc func publishEvent(name: AmazonChimeSDK.EventName)
  @objc func publishEvent(name: AmazonChimeSDK.EventName, attributes: [Swift.AnyHashable : Any])
  @objc func pushHistory(historyEventName: AmazonChimeSDK.MeetingHistoryEventName)
  @objc func addEventAnalyticsObserver(observer: AmazonChimeSDK.EventAnalyticsObserver)
  @objc func removeEventAnalyticsObserver(observer: AmazonChimeSDK.EventAnalyticsObserver)
  @objc func getMeetingHistory() -> [AmazonChimeSDK.MeetingHistoryEvent]
  @objc func getCommonEventAttributes() -> [Swift.AnyHashable : Any]
}
@objc public enum MediaDeviceType : Swift.Int, Swift.CustomStringConvertible {
  case audioBluetooth
  case audioWiredHeadset
  case audioBuiltInSpeaker
  case audioHandset
  case videoFrontCamera
  case videoBackCamera
  case other
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum VideoContentHint : Swift.Int {
  case none = 0
  case motion = 1
  case detail = 2
  case text = 3
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MediaError : Swift.Int, Swift.Error, Swift.CustomStringConvertible {
  case illegalState
  case audioFailedToStart
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
@objc public protocol MeetingSession {
  @objc var configuration: AmazonChimeSDK.MeetingSessionConfiguration { get }
  @objc var logger: AmazonChimeSDK.Logger { get }
  @objc var audioVideo: AmazonChimeSDK.AudioVideoFacade { get }
  @objc var eventAnalyticsController: AmazonChimeSDK.EventAnalyticsController { get }
}
@objc @objcMembers public class MeetingSessionConfiguration : ObjectiveC.NSObject {
  @objc final public let meetingId: Swift.String
  @objc final public let externalMeetingId: Swift.String?
  @objc final public let credentials: AmazonChimeSDK.MeetingSessionCredentials
  @objc final public let urls: AmazonChimeSDK.MeetingSessionURLs
  @objc final public let urlRewriter: AmazonChimeSDK.URLRewriter
  @objc convenience public init(createMeetingResponse: AmazonChimeSDK.CreateMeetingResponse, createAttendeeResponse: AmazonChimeSDK.CreateAttendeeResponse)
  @objc convenience public init(meetingId: Swift.String, credentials: AmazonChimeSDK.MeetingSessionCredentials, urls: AmazonChimeSDK.MeetingSessionURLs, urlRewriter: @escaping AmazonChimeSDK.URLRewriter)
  @objc public init(meetingId: Swift.String, externalMeetingId: Swift.String?, credentials: AmazonChimeSDK.MeetingSessionCredentials, urls: AmazonChimeSDK.MeetingSessionURLs, urlRewriter: @escaping AmazonChimeSDK.URLRewriter)
  @objc public init(createMeetingResponse: AmazonChimeSDK.CreateMeetingResponse, createAttendeeResponse: AmazonChimeSDK.CreateAttendeeResponse, urlRewriter: @escaping AmazonChimeSDK.URLRewriter)
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class MeetingSessionCredentials : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let attendeeId: Swift.String
  @objc final public let externalUserId: Swift.String
  @objc final public let joinToken: Swift.String
  @objc public init(attendeeId: Swift.String, externalUserId: Swift.String, joinToken: Swift.String)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public protocol VideoSink {
  @objc func onVideoFrameReceived(frame: AmazonChimeSDK.VideoFrame)
}
@objc @objcMembers public class DataMessage : ObjectiveC.NSObject {
  @objc final public let timestampMs: Swift.Int64
  @objc final public let topic: Swift.String
  @objc final public let data: Foundation.Data
  @objc final public let senderAttendeeId: Swift.String
  @objc final public let senderExternalUserId: Swift.String
  @objc final public let throttled: Swift.Bool
  @objc public init(topic: Swift.String, data: Foundation.Data, senderAttendeeId: Swift.String, senderExternalUserId: Swift.String, timestampMs: Swift.Int64, throttled: Swift.Bool)
  @objc public func text() -> Swift.String?
  @objc public func fromJSON() -> Any?
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class MeetingSessionStatus : ObjectiveC.NSObject {
  @objc final public let statusCode: AmazonChimeSDK.MeetingSessionStatusCode
  @objc public init(statusCode: AmazonChimeSDK.MeetingSessionStatusCode)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum MeetingSessionStatusCode : Swift.UInt32, Swift.CustomStringConvertible {
  case ok = 0
  case audioDisconnected = 9
  case connectionHealthReconnect = 10
  case networkBecomePoor = 59
  case audioServerHungup = 60
  case audioJoinedFromAnotherDevice = 61
  case audioInternalServerError = 62
  case audioAuthenticationRejected = 63
  case audioCallAtCapacity = 64
  case audioServiceUnavailable = 65
  case audioDisconnectAudio = 69
  case audioCallEnded = 75
  case videoServiceUnavailable = 12
  case unknown = 78
  case videoAtCapacityViewOnly = 206
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.UInt32
  public init?(rawValue: Swift.UInt32)
  public var rawValue: Swift.UInt32 {
    get
  }
}
@objc @objcMembers public class DefaultContentShareController : ObjectiveC.NSObject, AmazonChimeSDK.ContentShareController {
  @objc public init(contentShareVideoClientController: AmazonChimeSDK.ContentShareVideoClientController)
  @objc public func startContentShare(source: AmazonChimeSDK.ContentShareSource)
  @objc public func stopContentShare()
  @objc public func addContentShareObserver(observer: AmazonChimeSDK.ContentShareObserver)
  @objc public func removeContentShareObserver(observer: AmazonChimeSDK.ContentShareObserver)
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class ContentShareStatus : ObjectiveC.NSObject {
  @objc final public let statusCode: AmazonChimeSDK.ContentShareStatusCode
  @objc public init(statusCode: AmazonChimeSDK.ContentShareStatusCode)
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class MeetingSessionURLs : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let audioFallbackUrl: Swift.String
  @objc final public let audioHostUrl: Swift.String
  @objc final public let turnControlUrl: Swift.String
  @objc final public let signalingUrl: Swift.String
  @objc public init(audioFallbackUrl: Swift.String, audioHostUrl: Swift.String, turnControlUrl: Swift.String, signalingUrl: Swift.String, urlRewriter: (Swift.String) -> Swift.String)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public protocol MetricsObserver {
  @objc func metricsDidReceive(metrics: [Swift.AnyHashable : Any])
}
@objc public enum ObservableMetric : Swift.Int, Swift.CustomStringConvertible {
  case audioReceivePacketLossPercent
  case audioSendPacketLossPercent
  case videoAvailableSendBandwidth
  case videoAvailableReceiveBandwidth
  case videoSendBitrate
  case videoSendPacketLossPercent
  case videoSendFps
  case videoSendRttMs
  case videoReceiveBitrate
  case videoReceivePacketLossPercent
  case contentShareVideoSendBitrate
  case contentShareVideoSendPacketLossPercent
  case contentShareVideoSendFps
  case contentShareVideoSendRttMs
  public var description: Swift.String {
    get
  }
  public var isContentShareMetric: Swift.Bool {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PermissionError : Swift.Int, Swift.Error, Swift.CustomStringConvertible {
  case audioPermissionError
  case videoPermissionError
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class VideoFrameResender : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class VideoFrame : ObjectiveC.NSObject {
  @objc public var width: Swift.Int {
    @objc get
  }
  @objc public var height: Swift.Int {
    @objc get
  }
  @objc final public let timestampNs: Swift.Int64
  @objc final public let rotation: AmazonChimeSDK.VideoRotation
  @objc final public let buffer: AmazonChimeSDK.VideoFrameBuffer
  @objc public init(timestampNs: Swift.Int64, rotation: AmazonChimeSDK.VideoRotation, buffer: AmazonChimeSDK.VideoFrameBuffer)
  @objc public init?(sampleBuffer: CoreMedia.CMSampleBuffer)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol VideoClientProtocol {
  @objc var delegate: AmazonChimeSDKMedia.VideoClientDelegate! { get set }
  @objc static func globalInitialize()
  @objc static func setMediaClientConfig(_ configStr: Swift.String!)
  @objc static func devices() -> [Any]!
  @objc static func currentDevice() -> AmazonChimeSDKMedia.VideoDevice!
  @objc func start(_ callId: Swift.String!, token: Swift.String!, sending: Swift.Bool, config: AmazonChimeSDKMedia.VideoConfiguration!, appInfo: AmazonChimeSDKMedia.app_detailed_info_t)
  @objc func stop()
  @objc func setSending(_ sending: Swift.Bool)
  @objc func setReceiving(_ receiving: Swift.Bool)
  @objc func setExternalVideoSource(_ source: AmazonChimeSDKMedia.VideoSourceInternal!)
  @objc func stateString() -> Swift.String!
  @objc func getServiceType() -> AmazonChimeSDKMedia.video_client_service_type_t
  @objc func setRemotePause(_ video_id: Swift.UInt32, pause: Swift.Bool)
  @objc func activeTracks() -> [Any]!
  @objc func setCurrentDevice(_ captureDevice: AmazonChimeSDKMedia.VideoDevice!)
  @objc func videoLogCallBack(_ logLevel: AmazonChimeSDKMedia.video_client_loglevel_t, msg: Swift.String!)
  @objc func sendDataMessage(_ topic: Swift.String!, data: Swift.UnsafePointer<Swift.Int8>!, lifetimeMs: Swift.Int32)
}
extension VideoClient : AmazonChimeSDK.VideoClientProtocol {
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class DefaultEventAnalyticsController : ObjectiveC.NSObject, AmazonChimeSDK.EventAnalyticsController {
  @objc public func publishEvent(name: AmazonChimeSDK.EventName, attributes: [Swift.AnyHashable : Any])
  @objc public func getMeetingHistory() -> [AmazonChimeSDK.MeetingHistoryEvent]
  @objc public func publishEvent(name: AmazonChimeSDK.EventName)
  @objc public func pushHistory(historyEventName: AmazonChimeSDK.MeetingHistoryEventName)
  @objc public func addEventAnalyticsObserver(observer: AmazonChimeSDK.EventAnalyticsObserver)
  @objc public func removeEventAnalyticsObserver(observer: AmazonChimeSDK.EventAnalyticsObserver)
  @objc public func getCommonEventAttributes() -> [Swift.AnyHashable : Any]
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol RealtimeControllerFacade {
  @objc func realtimeLocalMute() -> Swift.Bool
  @objc func realtimeLocalUnmute() -> Swift.Bool
  @objc func addRealtimeObserver(observer: AmazonChimeSDK.RealtimeObserver)
  @objc func removeRealtimeObserver(observer: AmazonChimeSDK.RealtimeObserver)
  @objc func addRealtimeDataMessageObserver(topic: Swift.String, observer: AmazonChimeSDK.DataMessageObserver)
  @objc func removeRealtimeDataMessageObserverFromTopic(topic: Swift.String)
  @objc func realtimeSendDataMessage(topic: Swift.String, data: Any, lifetimeMs: Swift.Int32) throws
  @objc func realtimeSetVoiceFocusEnabled(enabled: Swift.Bool) -> Swift.Bool
  @objc func realtimeIsVoiceFocusEnabled() -> Swift.Bool
}
@objc public protocol EventAnalyticsObserver {
  @objc func eventDidReceive(name: AmazonChimeSDK.EventName, attributes: [Swift.AnyHashable : Any])
}
@objc public protocol RealtimeObserver {
  @objc func volumeDidChange(volumeUpdates: [AmazonChimeSDK.VolumeUpdate])
  @objc func signalStrengthDidChange(signalUpdates: [AmazonChimeSDK.SignalUpdate])
  @objc func attendeesDidJoin(attendeeInfo: [AmazonChimeSDK.AttendeeInfo])
  @objc func attendeesDidLeave(attendeeInfo: [AmazonChimeSDK.AttendeeInfo])
  @objc func attendeesDidDrop(attendeeInfo: [AmazonChimeSDK.AttendeeInfo])
  @objc func attendeesDidMute(attendeeInfo: [AmazonChimeSDK.AttendeeInfo])
  @objc func attendeesDidUnmute(attendeeInfo: [AmazonChimeSDK.AttendeeInfo])
}
@objc public protocol Scheduler {
  @objc func start()
  @objc func stop()
}
@objc public enum SendDataMessageError : Swift.Int, Swift.Error, Swift.CustomStringConvertible {
  case invalidDataLength
  case invalidTopic
  case negativeLifetimeParameter
  case invalidData
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
@objc public protocol MeetingStatsCollector {
  @objc func incrementRetryCount()
  @objc func incrementPoorConnectionCount()
  @objc func addMeetingHistoryEvent(historyEventName: AmazonChimeSDK.MeetingHistoryEventName, timestampMs: Swift.Int64)
  @objc func updateMaxVideoTile(videoTileCount: Swift.Int)
  @objc func updateMeetingStartTimeMs()
  @objc func resetMeetingStats()
  @objc func getMeetingStats() -> [Swift.AnyHashable : Any]
  @objc func getMeetingHistory() -> [AmazonChimeSDK.MeetingHistoryEvent]
}
@objc public protocol EventAnalyticsFacade {
  @objc func addEventAnalyticsObserver(observer: AmazonChimeSDK.EventAnalyticsObserver)
  @objc func removeEventAnalyticsObserver(observer: AmazonChimeSDK.EventAnalyticsObserver)
  @objc func getMeetingHistory() -> [AmazonChimeSDK.MeetingHistoryEvent]
  @objc func getCommonEventAttributes() -> [Swift.AnyHashable : Any]
}
@objc public enum SignalStrength : Swift.Int, Swift.CaseIterable, Swift.CustomStringConvertible {
  case none = 0
  case low = 1
  case high = 2
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [AmazonChimeSDK.SignalStrength]
  public static var allCases: [AmazonChimeSDK.SignalStrength] {
    get
  }
}
@objc @objcMembers public class SignalUpdate : ObjectiveC.NSObject {
  @objc final public let attendeeInfo: AmazonChimeSDK.AttendeeInfo
  @objc final public let signalStrength: AmazonChimeSDK.SignalStrength
  @objc public init(attendeeInfo: AmazonChimeSDK.AttendeeInfo, signalStrength: AmazonChimeSDK.SignalStrength)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol AudioSession {
  @objc var recordPermission: AVFoundation.AVAudioSession.RecordPermission { get }
  @objc var availableInputs: [AVFoundation.AVAudioSessionPortDescription]? { get }
  @objc func setPreferredInput(_ inPort: AVFoundation.AVAudioSessionPortDescription?) throws
  @objc func overrideOutputAudioPort(_ portOverride: AVFoundation.AVAudioSession.PortOverride) throws
  @objc var currentRoute: AVFoundation.AVAudioSessionRouteDescription { get }
}
extension AVAudioSession : AmazonChimeSDK.AudioSession {
}
@objc @_inheritsConvenienceInitializers @objcMembers public class Versioning : ObjectiveC.NSObject {
  @objc public static func sdkVersion() -> Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class DefaultMeetingStatsCollector : ObjectiveC.NSObject, AmazonChimeSDK.MeetingStatsCollector {
  @objc public func getMeetingHistory() -> [AmazonChimeSDK.MeetingHistoryEvent]
  @objc public func getMeetingStats() -> [Swift.AnyHashable : Any]
  @objc public func addMeetingHistoryEvent(historyEventName: AmazonChimeSDK.MeetingHistoryEventName, timestampMs: Swift.Int64)
  @objc public func incrementRetryCount()
  @objc public func incrementPoorConnectionCount()
  @objc public func updateMaxVideoTile(videoTileCount: Swift.Int)
  @objc public func updateMeetingStartTimeMs()
  @objc public func resetMeetingStats()
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol VideoClientController {
  @objc func start()
  @objc func stopAndDestroy()
  @objc func startLocalVideo() throws
  @objc func startLocalVideo(source: AmazonChimeSDK.VideoSource)
  @objc func stopLocalVideo()
  @objc func startRemoteVideo()
  @objc func stopRemoteVideo()
  @objc func switchCamera()
  @objc func getCurrentDevice() -> AmazonChimeSDK.MediaDevice?
  @objc func getConfiguration() -> AmazonChimeSDK.MeetingSessionConfiguration
  @objc func subscribeToVideoClientStateChange(observer: AmazonChimeSDK.AudioVideoObserver)
  @objc func unsubscribeFromVideoClientStateChange(observer: AmazonChimeSDK.AudioVideoObserver)
  @objc func subscribeToVideoTileControllerObservers(observer: AmazonChimeSDK.VideoTileController)
  @objc func unsubscribeFromVideoTileControllerObservers(observer: AmazonChimeSDK.VideoTileController)
  @objc func pauseResumeRemoteVideo(_ videoId: Swift.UInt32, pause: Swift.Bool)
  @objc func subscribeToReceiveDataMessage(topic: Swift.String, observer: AmazonChimeSDK.DataMessageObserver)
  @objc func unsubscribeFromReceiveDataMessageFromTopic(topic: Swift.String)
  @objc func sendDataMessage(topic: Swift.String, data: Any, lifetimeMs: Swift.Int32) throws
}
@objc @objcMembers public class DefaultCameraCaptureSource : ObjectiveC.NSObject, AmazonChimeSDK.CameraCaptureSource {
  @objc public var videoContentHint: AmazonChimeSDK.VideoContentHint
  @objc public init(logger: AmazonChimeSDK.Logger)
  @objc deinit
  @objc public var device: AmazonChimeSDK.MediaDevice? {
    @objc get
    @objc set
  }
  @objc public var format: AmazonChimeSDK.VideoCaptureFormat {
    @objc get
    @objc set
  }
  @objc public var torchEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public func addVideoSink(sink: AmazonChimeSDK.VideoSink)
  @objc public func removeVideoSink(sink: AmazonChimeSDK.VideoSink)
  @objc public func start()
  @objc public func stop()
  @objc public func switchCamera()
  @objc public func addCaptureSourceObserver(observer: AmazonChimeSDK.CaptureSourceObserver)
  @objc public func removeCaptureSourceObserver(observer: AmazonChimeSDK.CaptureSourceObserver)
  @objc public func setEventAnalyticsController(eventAnalyticsController: AmazonChimeSDK.EventAnalyticsController?)
  @objc override dynamic public init()
}
extension DefaultCameraCaptureSource : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @objc dynamic public func captureOutput(_: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from _: AVFoundation.AVCaptureConnection)
}
@objc public protocol AudioLock {
  @objc func lock()
  @objc func unlock()
}
extension NSLock : AmazonChimeSDK.AudioLock {
}
@objc @objcMembers public class VolumeUpdate : ObjectiveC.NSObject {
  @objc final public let attendeeInfo: AmazonChimeSDK.AttendeeInfo
  @objc final public let volumeLevel: AmazonChimeSDK.VolumeLevel
  @objc public init(attendeeInfo: AmazonChimeSDK.AttendeeInfo, volumeLevel: AmazonChimeSDK.VolumeLevel)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum VideoPauseState : Swift.Int, Swift.CaseIterable, Swift.CustomStringConvertible {
  case unpaused = 0
  case pausedByUserRequest = 1
  case pausedForPoorConnection = 2
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [AmazonChimeSDK.VideoPauseState]
  public static var allCases: [AmazonChimeSDK.VideoPauseState] {
    get
  }
}
@objc public protocol VideoRenderView : AmazonChimeSDK.VideoSink {
}
@objc public protocol VideoSource {
  @objc var videoContentHint: AmazonChimeSDK.VideoContentHint { get set }
  @objc func addVideoSink(sink: AmazonChimeSDK.VideoSink)
  @objc func removeVideoSink(sink: AmazonChimeSDK.VideoSink)
}
@objc public protocol VideoTile : AmazonChimeSDK.VideoSink {
  @objc var state: AmazonChimeSDK.VideoTileState { get }
  @objc var videoRenderView: AmazonChimeSDK.VideoRenderView? { get set }
  @objc func bind(videoRenderView: AmazonChimeSDK.VideoRenderView?)
  @objc func unbind()
  @objc func setPauseState(pauseState: AmazonChimeSDK.VideoPauseState)
}
@objc public protocol VideoTileController : AmazonChimeSDK.VideoTileControllerFacade {
  @objc func onReceiveFrame(frame: AmazonChimeSDK.VideoFrame?, videoId: Swift.Int, attendeeId: Swift.String?, pauseState: AmazonChimeSDK.VideoPauseState)
}
@objc public protocol VideoTileControllerFacade {
  @objc func bindVideoView(videoView: AmazonChimeSDK.VideoRenderView, tileId: Swift.Int)
  @objc func unbindVideoView(tileId: Swift.Int)
  @objc func addVideoTileObserver(observer: AmazonChimeSDK.VideoTileObserver)
  @objc func removeVideoTileObserver(observer: AmazonChimeSDK.VideoTileObserver)
  @objc func pauseRemoteVideoTile(tileId: Swift.Int)
  @objc func resumeRemoteVideoTile(tileId: Swift.Int)
}
@objc @objcMembers public class MeetingHistoryEvent : ObjectiveC.NSObject {
  @objc final public let meetingHistoryEventName: AmazonChimeSDK.MeetingHistoryEventName
  @objc final public let timestampMs: Swift.Int64
  @objc public init(meetingHistoryEventName: AmazonChimeSDK.MeetingHistoryEventName, timestampMs: Swift.Int64)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol VideoTileObserver {
  @objc func videoTileDidAdd(tileState: AmazonChimeSDK.VideoTileState)
  @objc func videoTileDidRemove(tileState: AmazonChimeSDK.VideoTileState)
  @objc func videoTileDidPause(tileState: AmazonChimeSDK.VideoTileState)
  @objc func videoTileDidResume(tileState: AmazonChimeSDK.VideoTileState)
  @objc func videoTileSizeDidChange(tileState: AmazonChimeSDK.VideoTileState)
}
@objc public protocol ContentShareController {
  @objc func startContentShare(source: AmazonChimeSDK.ContentShareSource)
  @objc func stopContentShare()
  @objc func addContentShareObserver(observer: AmazonChimeSDK.ContentShareObserver)
  @objc func removeContentShareObserver(observer: AmazonChimeSDK.ContentShareObserver)
}
@objc public enum ContentShareStatusCode : Swift.Int, Swift.CustomStringConvertible {
  case ok = 0
  case videoServiceFailed = 1
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class VideoTileState : ObjectiveC.NSObject {
  @objc final public let tileId: Swift.Int
  @objc final public let attendeeId: Swift.String
  @objc public var videoStreamContentWidth: Swift.Int
  @objc public var videoStreamContentHeight: Swift.Int
  @objc public var pauseState: AmazonChimeSDK.VideoPauseState
  @objc final public let isLocalTile: Swift.Bool
  @objc final public let isContent: Swift.Bool
  @objc public init(tileId: Swift.Int, attendeeId: Swift.String, videoStreamContentWidth: Swift.Int, videoStreamContentHeight: Swift.Int, pauseState: AmazonChimeSDK.VideoPauseState, isLocalTile: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum VolumeLevel : Swift.Int, Swift.CaseIterable, Swift.CustomStringConvertible {
  case muted = -1
  case notSpeaking = 0
  case low = 1
  case medium = 2
  case high = 3
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [AmazonChimeSDK.VolumeLevel]
  public static var allCases: [AmazonChimeSDK.VolumeLevel] {
    get
  }
}
extension AmazonChimeSDK.MeetingHistoryEventName : Swift.Equatable {}
extension AmazonChimeSDK.MeetingHistoryEventName : Swift.Hashable {}
extension AmazonChimeSDK.MeetingHistoryEventName : Swift.RawRepresentable {}
extension AmazonChimeSDK.ModalityType : Swift.Equatable {}
extension AmazonChimeSDK.ModalityType : Swift.Hashable {}
extension AmazonChimeSDK.ModalityType : Swift.RawRepresentable {}
extension AmazonChimeSDK.EventAttributeName : Swift.Equatable {}
extension AmazonChimeSDK.EventAttributeName : Swift.Hashable {}
extension AmazonChimeSDK.EventAttributeName : Swift.RawRepresentable {}
extension AmazonChimeSDK.CaptureSourceError : Swift.Equatable {}
extension AmazonChimeSDK.CaptureSourceError : Swift.Hashable {}
extension AmazonChimeSDK.CaptureSourceError : Swift.RawRepresentable {}
extension AmazonChimeSDK.VideoRotation : Swift.Equatable {}
extension AmazonChimeSDK.VideoRotation : Swift.Hashable {}
extension AmazonChimeSDK.VideoRotation : Swift.RawRepresentable {}
extension AmazonChimeSDK.AttendeeStatus : Swift.Equatable {}
extension AmazonChimeSDK.AttendeeStatus : Swift.Hashable {}
extension AmazonChimeSDK.AttendeeStatus : Swift.RawRepresentable {}
extension AmazonChimeSDK.EventName : Swift.Equatable {}
extension AmazonChimeSDK.EventName : Swift.Hashable {}
extension AmazonChimeSDK.EventName : Swift.RawRepresentable {}
extension AmazonChimeSDK.LogLevel : Swift.Equatable {}
extension AmazonChimeSDK.LogLevel : Swift.Hashable {}
extension AmazonChimeSDK.LogLevel : Swift.RawRepresentable {}
extension AmazonChimeSDK.MediaDeviceType : Swift.Equatable {}
extension AmazonChimeSDK.MediaDeviceType : Swift.Hashable {}
extension AmazonChimeSDK.MediaDeviceType : Swift.RawRepresentable {}
extension AmazonChimeSDK.VideoContentHint : Swift.Equatable {}
extension AmazonChimeSDK.VideoContentHint : Swift.Hashable {}
extension AmazonChimeSDK.VideoContentHint : Swift.RawRepresentable {}
extension AmazonChimeSDK.MediaError : Swift.Equatable {}
extension AmazonChimeSDK.MediaError : Swift.Hashable {}
extension AmazonChimeSDK.MediaError : Swift.RawRepresentable {}
extension AmazonChimeSDK.MeetingSessionStatusCode : Swift.Equatable {}
extension AmazonChimeSDK.MeetingSessionStatusCode : Swift.Hashable {}
extension AmazonChimeSDK.MeetingSessionStatusCode : Swift.RawRepresentable {}
extension AmazonChimeSDK.ObservableMetric : Swift.Equatable {}
extension AmazonChimeSDK.ObservableMetric : Swift.Hashable {}
extension AmazonChimeSDK.ObservableMetric : Swift.RawRepresentable {}
extension AmazonChimeSDK.PermissionError : Swift.Equatable {}
extension AmazonChimeSDK.PermissionError : Swift.Hashable {}
extension AmazonChimeSDK.PermissionError : Swift.RawRepresentable {}
extension AmazonChimeSDK.SendDataMessageError : Swift.Equatable {}
extension AmazonChimeSDK.SendDataMessageError : Swift.Hashable {}
extension AmazonChimeSDK.SendDataMessageError : Swift.RawRepresentable {}
extension AmazonChimeSDK.SignalStrength : Swift.Equatable {}
extension AmazonChimeSDK.SignalStrength : Swift.Hashable {}
extension AmazonChimeSDK.SignalStrength : Swift.RawRepresentable {}
extension AmazonChimeSDK.VideoPauseState : Swift.Equatable {}
extension AmazonChimeSDK.VideoPauseState : Swift.Hashable {}
extension AmazonChimeSDK.VideoPauseState : Swift.RawRepresentable {}
extension AmazonChimeSDK.ContentShareStatusCode : Swift.Equatable {}
extension AmazonChimeSDK.ContentShareStatusCode : Swift.Hashable {}
extension AmazonChimeSDK.ContentShareStatusCode : Swift.RawRepresentable {}
extension AmazonChimeSDK.VolumeLevel : Swift.Equatable {}
extension AmazonChimeSDK.VolumeLevel : Swift.Hashable {}
extension AmazonChimeSDK.VolumeLevel : Swift.RawRepresentable {}
